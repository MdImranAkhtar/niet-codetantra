Q1 ###########################################
w = int(input())
if w > 2 and w % 2 == 0:
  print("YES")
else:
  print("NO")

Q2#################################################
def isprime(n):
  if n <= 1:
    return False
  if n <= 3:
    return True
  if n % 2 == 0 or n % 3 == 0:
    return False
  i = 5
  while i * i <= n:
    if n % i == 0 or n % (i + 2) == 0:
      return False
    i = i + 6
  return True

def check_sum_of_primes(N):
  for i in range(2, N):
    if isprime(i) and isprime(N - i):
      return "Yes"
  return "No"

N = int(input())
result = check_sum_of_primes(N)
print(result)

Q3####################################################
def isprime(n):
  if n <= 1:
    return False
  if n <= 3:
    return True
  if n % 2 == 0 or n % 3 == 0:
    return False
  i = 5
  while i * i <= n:
    if n % i == 0 or n % (i + 2) == 0:
      return False
    i = i + 6
  return True

def count_primes(L, R):
  count = 0
  for i in range(L, R + 1):
    if isprime(i):
      count += 1
  return count

L, R = map(int, input().split())
result = count_primes(L, R)
print(result)



Q4########################
def is_prime(n):
  if n <= 1:
    return False
  if n <= 3:
    return True
  if n % 2 == 0 or n % 3 == 0:
    return False
  i = 5
  while i * i <= n:
    if n % i == 0 or n % (i + 2) == 0:
      return False
    i = i + 6
  return True

def find_six_prime_pairs(L, R):
  pairs = []
  for i in range(L, R - 5):
    if is_prime(i) and is_prime(i + 6):
      pairs.append((i, i + 6))
  return pairs

L, R = map(int, input().split())
pairs = find_six_prime_pairs(L, R)
for pair in pairs:
  print(pair[0], pair[1], end=" ")


Q5###############################################
def find_majority_fruit(fruits):
    candidate = None
    count = 0
    
    for fruit in fruits:
        if count == 0:
            candidate = fruit
        count += (1 if fruit == candidate else -1)
    
    count = sum(1 for fruit in fruits if fruit == candidate)
    
    if count > len(fruits) // 2:
        return candidate
    else:
        return -1


import sys
input = sys.stdin.read
data = input().split()
N = int(data[0])
fruits = list(map(int, data[1:N+1]))
result = find_majority_fruit(fruits)
print(result)



